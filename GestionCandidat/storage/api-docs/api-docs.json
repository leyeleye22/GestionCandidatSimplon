{
    "openapi": "3.0.0",
    "paths": {
        "/login": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Logs in a user",
                "description": "Authenticates a user and returns a JWT token upon successful login",
                "operationId": "login",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "email",
                                    "password"
                                ],
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "user@example.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "example": "password123"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful login",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "user": {
                                            "$ref": "#/components/schemas/User"
                                        },
                                        "authorization": {
                                            "properties": {
                                                "token": {
                                                    "type": "string",
                                                    "example": "generated-token"
                                                },
                                                "type": {
                                                    "type": "string",
                                                    "example": "bearer"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "integer",
                                            "example": 403
                                        },
                                        "error": {
                                            "type": "string",
                                            "example": "erreur de connexion"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Register a new user",
                "description": "Creates a new user account",
                "operationId": "register",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "nom",
                                    "prenom",
                                    "email",
                                    "telephone",
                                    "dateNaissance",
                                    "adresse",
                                    "formationDesiree",
                                    "accepted",
                                    "role",
                                    "password"
                                ],
                                "properties": {
                                    "nom": {
                                        "type": "string",
                                        "maxLength": 255,
                                        "example": "John"
                                    },
                                    "prenom": {
                                        "type": "string",
                                        "maxLength": 255,
                                        "example": "Doe"
                                    },
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "maxLength": 255,
                                        "example": "john@example.com"
                                    },
                                    "telephone": {
                                        "type": "string",
                                        "maxLength": 12,
                                        "example": "770123456"
                                    },
                                    "dateNaissance": {
                                        "type": "string",
                                        "format": "date",
                                        "example": "1990-01-01"
                                    },
                                    "adresse": {
                                        "type": "string",
                                        "maxLength": 255,
                                        "example": "123 Street, City"
                                    },
                                    "formationDesiree": {
                                        "type": "string",
                                        "maxLength": 255,
                                        "example": "Computer Science"
                                    },
                                    "accepted": {
                                        "type": "string",
                                        "enum": [
                                            "isAccept",
                                            "isNotAccept"
                                        ],
                                        "example": "isAccept"
                                    },
                                    "role": {
                                        "type": "string",
                                        "enum": [
                                            "candidat",
                                            "admin"
                                        ],
                                        "example": "candidat"
                                    },
                                    "password": {
                                        "type": "string",
                                        "minLength": 6,
                                        "example": "password123"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User created successfully"
                                        },
                                        "user": {
                                            "$ref": "#/components/schemas/Candidat"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "field_name": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            },
                                            "example": [
                                                "The field_name field is required."
                                            ]
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/logout": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Logout a user",
                "description": "Logs out the currently authenticated user",
                "operationId": "logout",
                "responses": {
                    "200": {
                        "description": "Successfully logged out",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Successfully logged out"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/refresh": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Refresh user's access token",
                "description": "Refreshes the user's access token",
                "operationId": "refresh",
                "responses": {
                    "200": {
                        "description": "Token refreshed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "user": {
                                            "$ref": "#/components/schemas/User"
                                        },
                                        "authorisation": {
                                            "properties": {
                                                "token": {
                                                    "type": "string",
                                                    "example": "newly-generated-token"
                                                },
                                                "type": {
                                                    "type": "string",
                                                    "example": "bearer"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/show/candidature": {
            "get": {
                "tags": [
                    "Candidatures"
                ],
                "summary": "Show list of candidatures",
                "description": "Retrieves a list of all candidatures",
                "operationId": "showCandidatureList",
                "responses": {
                    "200": {
                        "description": "List of candidatures retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "succes": {
                                            "type": "integer",
                                            "example": 200
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Liste des candidatures"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Candidature"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/candidater/{formation}": {
            "post": {
                "tags": [
                    "Candidatures"
                ],
                "summary": "Apply for a formation",
                "description": "Allows a user to apply for a specific formation",
                "operationId": "applyForFormation",
                "parameters": [
                    {
                        "name": "formation",
                        "in": "path",
                        "description": "ID of the formation to apply for",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Candidature created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "integer",
                                            "example": 200
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/Candidature"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "300": {
                        "description": "Error: Candidature already exists",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "integer",
                                            "example": 300
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Candidature already exists"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden: Unable to apply for the formation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "integer",
                                            "example": 403
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Impossible de candidater"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/revoquer/candidature/{candidature}/{formation}": {
            "post": {
                "tags": [
                    "Candidatures"
                ],
                "summary": "Revoke a candidature",
                "description": "Revokes a candidature for a specific formation",
                "operationId": "revokeCandidature",
                "parameters": [
                    {
                        "name": "candidature",
                        "in": "path",
                        "description": "ID of the candidature to be revoked",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "formation",
                        "in": "path",
                        "description": "ID of the formation related to the candidature",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Candidature revoked successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "integer",
                                            "example": 200
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Candidature annulée"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Error in revoking candidature",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "integer",
                                            "example": 400
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Erreur d'annulation"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Forbidden"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/list/formation": {
            "get": {
                "tags": [
                    "Formations"
                ],
                "summary": "Get list of formations",
                "description": "Retrieves a list of all formations",
                "operationId": "getFormationList",
                "responses": {
                    "200": {
                        "description": "List of formations",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "integer",
                                            "example": 200
                                        },
                                        "Liste des formations": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Formation"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/cloture/formation/{formation}": {
            "post": {
                "tags": [
                    "Formations"
                ],
                "summary": "Close a formation",
                "description": "Closes a specific formation",
                "operationId": "closeFormation",
                "parameters": [
                    {
                        "name": "formation",
                        "in": "path",
                        "description": "ID of the formation to be closed",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Formation closed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "integer",
                                            "example": 200
                                        },
                                        "Formation": {
                                            "type": "string",
                                            "example": "Cloture/en cours"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Formation not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Formation not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/ajout/formation": {
            "post": {
                "tags": [
                    "Formations"
                ],
                "summary": "Add a new formation",
                "description": "Creates a new formation",
                "operationId": "addFormation",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "nomFormation",
                                    "description",
                                    "duree",
                                    "status"
                                ],
                                "properties": {
                                    "nomFormation": {
                                        "type": "string",
                                        "maxLength": 255,
                                        "example": "Formation XYZ"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Description of the formation"
                                    },
                                    "duree": {
                                        "type": "integer",
                                        "example": 10
                                    },
                                    "status": {
                                        "type": "string",
                                        "enum": [
                                            "en_cours",
                                            "en_attente"
                                        ],
                                        "example": "en_cours"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Formation created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "integer",
                                            "example": 200
                                        },
                                        "Formation": {
                                            "$ref": "#/components/schemas/Formation"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "field_name": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            },
                                            "example": [
                                                "The field_name field is required."
                                            ]
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/modifier/formation/{formation}": {
            "post": {
                "tags": [
                    "Formations"
                ],
                "summary": "Update a formation",
                "description": "Updates a specific formation",
                "operationId": "updateFormation",
                "parameters": [
                    {
                        "name": "formation",
                        "in": "path",
                        "description": "ID of the formation to be updated",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "nomFormation",
                                    "description",
                                    "duree",
                                    "status"
                                ],
                                "properties": {
                                    "nomFormation": {
                                        "type": "string",
                                        "maxLength": 255,
                                        "example": "Updated Formation Name"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Updated Description of the formation"
                                    },
                                    "duree": {
                                        "type": "integer",
                                        "example": 20
                                    },
                                    "status": {
                                        "type": "string",
                                        "enum": [
                                            "en_cours",
                                            "en_attente"
                                        ],
                                        "example": "en_cours"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Formation updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "integer",
                                            "example": 200
                                        },
                                        "Formation": {
                                            "$ref": "#/components/schemas/Formation"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "field_name": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            },
                                            "example": [
                                                "The field_name field is required."
                                            ]
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/supprimer/formation/{formation}": {
            "delete": {
                "tags": [
                    "Formations"
                ],
                "summary": "Delete a formation",
                "description": "Deletes a specific formation",
                "operationId": "deleteFormation",
                "parameters": [
                    {
                        "name": "formation",
                        "in": "path",
                        "description": "ID of the formation to be deleted",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Formation deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "integer",
                                            "example": 200
                                        },
                                        "Formation": {
                                            "type": "string",
                                            "example": "Formation supprimée avec succès"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Formation not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Formation not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        }
    }
}